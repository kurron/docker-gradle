apply plugin: 'groovy'

repositories {
    maven {
        name = 'kurron'
        url = 'http://dl.bintray.com/kurron/maven'
    }
}

dependencies {
    compile "org.codehaus.groovy:groovy-all:${groovyVersion}:indy"
    compile "org.kurron:tools-java:${toolsJavaVersion}"
}

compileGroovy {
    groovyOptions.configurationScript = file( "${rootDir}/overrides/groovyCompilerConfiguration.groovy" ).exists() ? file( "${rootDir}/overrides/groovyCompilerConfiguration.groovy" ) : file( "/opt/gradle/gradle/groovy/groovyCompilerConfiguration.groovy" )
}

logger.quiet "compileGroovy.groovyOptions.configurationScript = ${compileGroovy.groovyOptions.configurationScript}"

compileGroovy.groovyOptions.optimizationOptions['indy'] = true
compileTestGroovy.groovyOptions.optimizationOptions['indy'] = true

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

compileGroovy.options*.compilerArgs = ['-Xlint:deprecation','-encoding', 'UTF-8']
compileTestGroovy.options*.compilerArgs = ['-Xlint:deprecation','-encoding', 'UTF-8']

test {
    maxParallelForks = Runtime.runtime.availableProcessors()
    scanForTestClasses = true
    beforeTest { descriptor ->
        logger.lifecycle( "Running test: ${descriptor}" )
    }
    useJUnit {
        includeCategories 'org.kurron.categories.UnitTest'
    }
    testLogging {
        showStandardStreams = true
        exceptionFormat = 'full'
    }
    reports.html.destination =  "$buildDir/reports/unitTests"
}

task componentTest( type: Test ) {
    dependsOn = [classes, testClasses] 
    group = 'Verification'
    description = 'Runs the component-level tests.'
    maxParallelForks = Runtime.runtime.availableProcessors()
    scanForTestClasses = true
    beforeTest { descriptor ->
        logger.lifecycle( "Running test: ${descriptor}" )
    }
    useJUnit {
        includeCategories 'org.kurron.categories.ComponentTest'
    }
    testLogging {
        showStandardStreams = true
        exceptionFormat = 'full'
    }
    reports.html.destination =  "$buildDir/reports/componentTests"
}
 
task outboundIntegrationTest( type: Test ) {
    dependsOn = [classes, testClasses]
    group = 'Verification'
    description = 'Runs the outbound gateway integration tests.'
    maxParallelForks = Runtime.runtime.availableProcessors()
    scanForTestClasses = true
    beforeTest { descriptor ->
        logger.lifecycle( "Running test: ${descriptor}" )
    }
    useJUnit {
        includeCategories 'org.kurron.categories.OutboundIntegrationTest'
    }
    testLogging {
        showStandardStreams = true
        exceptionFormat = 'full'
    }
    reports.html.destination =  "$buildDir/reports/outboundIntegrationTests"
}

task inboundIntegrationTest( type: Test ) {
    dependsOn = [classes, testClasses]
    group = 'Verification'
    description = 'Runs the inbound gateway integration tests.'
    maxParallelForks = Runtime.runtime.availableProcessors()
    scanForTestClasses = true
    beforeTest { descriptor ->
        logger.lifecycle( "Running test: ${descriptor}" )
    }
    useJUnit {
        includeCategories 'org.kurron.categories.InboundIntegrationTest'
    }
    testLogging {
        showStandardStreams = true
        exceptionFormat = 'full'
    }
    reports.html.destination =  "$buildDir/reports/inboundIntegrationTests"
}

task endToEndTest( type: Test ) {
    dependsOn = [classes, testClasses]
    group = 'Verification'
    description = 'Runs the end-to-end tests.'
    maxParallelForks = Runtime.runtime.availableProcessors()
    scanForTestClasses = true
    beforeTest { descriptor ->
        logger.lifecycle( "Running test: ${descriptor}" )
    }
    useJUnit {
        includeCategories 'org.kurron.categories.EndToEndTest'
    }
    testLogging {
        showStandardStreams = true
        exceptionFormat = 'full'
    }
    reports.html.destination =  "$buildDir/reports/endToEndTests"
}

task acceptanceTest( type: Test ) {
    dependsOn = [classes, testClasses]
    group = 'Verification'
    description = 'Runs the acceptance tests.'
    maxParallelForks = Runtime.runtime.availableProcessors()
    scanForTestClasses = false
    // categories and cucumber tests don't play nicely -- no tests are detected and run
    includes = ['**/**AcceptanceTest.class']
    beforeTest { descriptor ->
        logger.lifecycle( "Running test: ${descriptor}" )
    }
    testLogging {
        showStandardStreams = true
        exceptionFormat = 'full'
    }
    // the Cucumber annotation dictates the name and location of the report file
}

apply from: "/opt/gradle/gradle/testing/spock.gradle"
apply from: "/opt/gradle/gradle/testing/jacoco.gradle"
apply from: "/opt/gradle/gradle/testing/cucumber-jvm-groovy.gradle"
apply from: "/opt/gradle/gradle/groovy/codenarc.gradle"
